# Scenario where user experience based on job latency is the top criterium.
# Short jobs needs to be evaluated almost interactively, long jobs may be delayed much longer.
# The objective is achieved by imposing limits on queues, only jobs that are expected to
# take no more than given limit are allowed in (all queues remain active the whole time).
# The key part of the scenario is the duration estimation algorithm used by dispatcher.

# This configuration uses job dispatcher with oracle that can guess the exact duration of a job.
# The oracle is implemented by cheating, the estimate is taken from job.duration which should
# not be accessed in dispatching in regular experiments.
# The purpose of this configuration is to measure performance of the theoretical optimum as a reference point.

# Workers could be either a number or a list that explicitly states a collection of attributes
# If only a number is given, the workers are initialized with no attributes at the beginning.
workers:
  - active: true # first worker has no limit
  - active: true
    limit: 30.0
  - active: true
    limit: 30.0
  - active: true
    limit: 30.0

# dispatcher component: either a string (fully qualified class name) or a collection with { class, args }
# where class is fully qualified class name and args is list or dict holding constructor arguments
dispatcher: experiments.user_experience.dispatcher.OracleJobCategoryDispatcher

# list of metric components (each one is in the same format as dispatcher)
metrics:
  - metrics.default.JobDelayMetricsCollector
  - class: metrics.user_experience.UserExperienceMetricsCollector
    args:
      - "@@ref_jobs"
      - [ 1.5, 3.0 ]  # thresholds
